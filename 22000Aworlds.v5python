{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\ncontroller_1 = Controller(PRIMARY)\nRHS_motor_a = Motor(Ports.PORT9, GearSetting.RATIO_6_1, False)\nRHS_motor_b = Motor(Ports.PORT10, GearSetting.RATIO_6_1, False)\nRHS = MotorGroup(RHS_motor_a, RHS_motor_b)\nLHS_motor_a = Motor(Ports.PORT1, GearSetting.RATIO_6_1, True)\nLHS_motor_b = Motor(Ports.PORT2, GearSetting.RATIO_6_1, True)\nLHS = MotorGroup(LHS_motor_a, LHS_motor_b)\nleftWing = DigitalOut(brain.three_wire_port.g)\nlift = DigitalOut(brain.three_wire_port.a)\nIntake_motor_a = Motor(Ports.PORT5, GearSetting.RATIO_6_1, False)\nIntake_motor_b = Motor(Ports.PORT6, GearSetting.RATIO_6_1, True)\nIntake = MotorGroup(Intake_motor_a, Intake_motor_b)\nRTop = Motor(Ports.PORT8, GearSetting.RATIO_6_1, True)\nLTop = Motor(Ports.PORT3, GearSetting.RATIO_6_1, False)\nrightWing = DigitalOut(brain.three_wire_port.h)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\n\nvexcode_brain_precision = 0\nvexcode_console_precision = 0\nvexcode_controller_1_precision = 0\nr1Presses = 0\nliftStatus = 0\nautonMode = 0\nleftWingStatus = 0\nrightWingStatus = 0\nstart = 0\nminSpeed = 10\nminSpeedDiv = (100 - minSpeed) / 100\n\ninchToDegConstant = 150\nturn180 = 500\n\ndef ondriver_drivercontrol_0():\n    global launchOn, intakeForward, intakeBack, shoot, r1Presses, liftStatus, moveCataButtonPress, autonMode, armUpDown, leftWingStatus, rightWingStatus, start, message1, fullDrive, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    controller_1.buttonA.released(changeLiftState)\n    controller_1.buttonL2.released(changeLeftWingState)\n    controller_1.buttonR2.released(changeRightWingState)\n    RHS.set_stopping(COAST)\n    LHS.set_stopping(COAST)\n    RTop.set_stopping(COAST)\n    LTop.set_stopping(COAST)\n    controller_1.screen.print(\"minSpeed: \")\n    controller_1.screen.print(minSpeed)\n    start = 0\n    liftStatus = 0\n    rightWingStatus = 0\n    leftWingStatus = 0\n    rightWing.set(False)\n    leftWing.set(False)\n    while True:\n        if controller_1.axis3.position() > 5:\n            LHS.set_velocity((minSpeed + controller_1.axis3.position() * minSpeedDiv), PERCENT)\n            LHS.spin(FORWARD)\n            LTop.set_velocity((minSpeed + controller_1.axis3.position() * minSpeedDiv), PERCENT)\n            LTop.spin(FORWARD)\n        if controller_1.axis2.position() > 5:\n            RHS.set_velocity((minSpeed + controller_1.axis2.position() * minSpeedDiv), PERCENT)\n            RHS.spin(FORWARD)\n            RTop.set_velocity((minSpeed + controller_1.axis2.position() * minSpeedDiv), PERCENT)\n            RTop.spin(FORWARD)\n        if controller_1.axis3.position() < -5:\n            LHS.set_velocity((minSpeed + (0 - controller_1.axis3.position()) * minSpeedDiv), PERCENT)\n            LHS.spin(REVERSE)\n            LTop.set_velocity((minSpeed + (0 - controller_1.axis3.position()) * minSpeedDiv), PERCENT)\n            LTop.spin(REVERSE)\n        if controller_1.axis2.position() < -5:\n            RHS.set_velocity((minSpeed + (0 - controller_1.axis2.position()) * minSpeedDiv), PERCENT)\n            RHS.spin(REVERSE)\n            RTop.set_velocity((minSpeed + (0 - controller_1.axis2.position()) * minSpeedDiv), PERCENT)\n            RTop.spin(REVERSE)\n        if controller_1.axis3.position() > -5 and controller_1.axis3.position() < 5:\n            LHS.stop()\n            LTop.stop()\n        if controller_1.axis2.position() > -5 and controller_1.axis2.position() < 5:\n            RHS.stop()\n            RTop.stop()\n        if controller_1.buttonL1.pressing():\n            Intake.set_velocity(100,PERCENT);\n            Intake.spin(REVERSE);\n        elif controller_1.buttonR1.pressing():\n            Intake.set_velocity(100,PERCENT);\n            Intake.spin(FORWARD);\n        else:\n            Intake.stop()\n            \n        wait(5, MSEC)\n\n# lift\ndef changeLiftState():\n    global launchOn, intakeForward, intakeBack, shoot, r1Presses, liftStatus, moveCataButtonPress, autonMode, armUpDown, leftWingStatus, rightWingStatus, start, message1, fullDrive, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    if liftStatus == 0:\n        lift.set(True)\n        liftStatus = 1\n    else:\n        lift.set(False) \n        liftStatus = 0\n\n# right wing\ndef changeRightWingState():\n    global launchOn, intakeForward, intakeBack, shoot, r1Presses, liftStatus, moveCataButtonPress, autonMode, armUpDown, leftWingStatus, rightWingStatus, start, message1, fullDrive, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    if rightWingStatus == 0:\n        rightWing.set(True)\n        rightWingStatus = 1\n    else:\n        rightWing.set(False) \n        rightWingStatus = 0\n\n# left wing\ndef changeLeftWingState():\n    global launchOn, intakeForward, intakeBack, shoot, r1Presses, liftStatus, moveCataButtonPress, autonMode, armUpDown, leftWingStatus, rightWingStatus, start, message1, fullDrive, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    if leftWingStatus == 0:\n        leftWing.set(True)\n        leftWingStatus = 1\n    else:\n        leftWing.set(False) \n        leftWingStatus = 0\n\ndef when_started1():\n    global launchOn, intakeForward, intakeBack, shoot, r1Presses, liftStatus, moveCataButtonPress, autonMode, armUpDown, leftWingStatus, rightWingStatus, start, message1, fullDrive, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    lift.set(False)\n    leftWing.set(False)\n    rightWing.set(False)\n    RHS.set_velocity(90, PERCENT)\n    RHS.set_max_torque(100, PERCENT)\n    LHS.set_velocity(90, PERCENT)\n    LHS.set_max_torque(100, PERCENT)\n    RTop.set_velocity(90, PERCENT)\n    RTop.set_max_torque(100, PERCENT)\n    LTop.set_velocity(90, PERCENT)\n    LTop.set_max_torque(100, PERCENT)\n    Intake.set_velocity(100, PERCENT)\n    Intake.set_stopping(COAST)\n\n# -------------------- edit auton code here --------------------\n# --------------------------------------------------------------\n# -------------------------------------------------------------- \ndef onauton_autonomous_0():\n    global launchOn, intakeForward, intakeBack, shoot, r1Presses, liftStatus, moveCataButtonPress, autonMode, armUpDown, leftWingStatus, rightWingStatus, start, message1, fullDrive, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    controller_1.screen.print(\"|auton|\")\n    forwardIn(10)\n    reverse(20)\n    lowerRightWing()\n    lowerLeftWing()\n    turnRight(30)\n    reverse(10)\n    raiseRightWing()\n    turnRight(60)\n    reverse(10)\n    forward(10)\n    raiseLeftWing()\n    turnRight(180)\n    forwardOut(10)\n    turnLeft(70)\n    forwardIn(35)\n    turnRight(130)\n    forwardOut(15)\n    turnLeft(90)\n    forwardIn(20)\n    turnRight(20)\n    lowerLeftWing()\n    lowerRightWing()\n    reverse(40)\n    forward(10)\n    raiseRightWing()\n    raiseLeftWing()\n    turnRight(180)\n    forwardOut(20)\n    controller_1.screen.print(\"finished|\")\n\ndef forward(dist, speed=100, w=True):\n    global launchOn, intakeForward, intakeBack, shoot, r1Presses, liftStatus, moveCataButtonPress, autonMode, armUpDown, leftWingStatus, rightWingStatus, start, message1, fullDrive, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    LHS.set_velocity(speed,PERCENT);\n    LTop.set_velocity(speed,PERCENT);\n    RHS.set_velocity(speed,PERCENT);\n    RTop.set_velocity(speed,PERCENT);\n    LHS.spin_for(FORWARD, inchToDeg(dist), DEGREES, wait=False);\n    LTop.spin_for(FORWARD, inchToDeg(dist), DEGREES, wait=False);\n    RHS.spin_for(FORWARD, inchToDeg(dist), DEGREES, wait=False);\n    RTop.spin_for(FORWARD, inchToDeg(dist), DEGREES, wait=w);\n\ndef forwardIn(dist, speed=100, w=True):\n    global launchOn, intakeForward, intakeBack, shoot, r1Presses, liftStatus, moveCataButtonPress, autonMode, armUpDown, leftWingStatus, rightWingStatus, start, message1, fullDrive, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    LHS.set_velocity(speed,PERCENT);\n    LTop.set_velocity(speed,PERCENT);\n    RHS.set_velocity(speed,PERCENT);\n    RTop.set_velocity(speed,PERCENT);\n    Intake.spin_for(FORWARD, intakeConversion(inchToDeg(dist)), DEGREES, wait=False)\n    LHS.spin_for(FORWARD, inchToDeg(dist), DEGREES, wait=False);\n    LTop.spin_for(FORWARD, inchToDeg(dist), DEGREES, wait=False);\n    RHS.spin_for(FORWARD, inchToDeg(dist), DEGREES, wait=False);\n    RTop.spin_for(FORWARD, inchToDeg(dist), DEGREES, wait=w);\n\ndef forwardOut(dist, speed=100, w=True):\n    global launchOn, intakeForward, intakeBack, shoot, r1Presses, liftStatus, moveCataButtonPress, autonMode, armUpDown, leftWingStatus, rightWingStatus, start, message1, fullDrive, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    LHS.set_velocity(speed,PERCENT);\n    LTop.set_velocity(speed,PERCENT);\n    RHS.set_velocity(speed,PERCENT);\n    RTop.set_velocity(speed,PERCENT);\n    Intake.spin_for(REVERSE, intakeConversion(inchToDeg(dist)), DEGREES, wait=False)\n    LHS.spin_for(FORWARD, inchToDeg(dist), DEGREES, wait=False);\n    LTop.spin_for(FORWARD, inchToDeg(dist), DEGREES, wait=False);\n    RHS.spin_for(FORWARD, inchToDeg(dist), DEGREES, wait=False);\n    RTop.spin_for(FORWARD, inchToDeg(dist), DEGREES, wait=w);\n\ndef reverse(dist, speed=100, w=True):\n    global launchOn, intakeForward, intakeBack, shoot, r1Presses, liftStatus, moveCataButtonPress, autonMode, armUpDown, leftWingStatus, rightWingStatus, start, message1, fullDrive, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    LHS.set_velocity(speed,PERCENT);\n    LTop.set_velocity(speed,PERCENT);\n    RHS.set_velocity(speed,PERCENT);\n    RTop.set_velocity(speed,PERCENT);\n    LHS.spin_for(REVERSE, inchToDeg(dist), DEGREES, wait=False);\n    LTop.spin_for(REVERSE, inchToDeg(dist), DEGREES, wait=False);\n    RHS.spin_for(REVERSE, inchToDeg(dist), DEGREES, wait=False);\n    RTop.spin_for(REVERSE, inchToDeg(dist), DEGREES, wait=w);\n\ndef reverseIn(dist, speed=100, w=True):\n    global launchOn, intakeForward, intakeBack, shoot, r1Presses, liftStatus, moveCataButtonPress, autonMode, armUpDown, leftWingStatus, rightWingStatus, start, message1, fullDrive, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    LHS.set_velocity(speed,PERCENT);\n    LTop.set_velocity(speed,PERCENT);\n    RHS.set_velocity(speed,PERCENT);\n    RTop.set_velocity(speed,PERCENT);\n    Intake.spin_for(FORWARD, intakeConversion(inchToDeg(dist)), DEGREES, wait=False)\n    LHS.spin_for(REVERSE, inchToDeg(dist), DEGREES, wait=False);\n    LTop.spin_for(REVERSE, inchToDeg(dist), DEGREES, wait=False);\n    RHS.spin_for(REVERSE, inchToDeg(dist), DEGREES, wait=False);\n    RTop.spin_for(REVERSE, inchToDeg(dist), DEGREES, wait=w);\n\ndef reverseOut(dist, speed=100, w=True):\n    global launchOn, intakeForward, intakeBack, shoot, r1Presses, liftStatus, moveCataButtonPress, autonMode, armUpDown, leftWingStatus, rightWingStatus, start, message1, fullDrive, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    LHS.set_velocity(speed,PERCENT);\n    LTop.set_velocity(speed,PERCENT);\n    RHS.set_velocity(speed,PERCENT);\n    RTop.set_velocity(speed,PERCENT);\n    Intake.spin_for(REVERSE, intakeConversion(inchToDeg(dist)), DEGREES, wait=False)\n    LHS.spin_for(REVERSE, inchToDeg(dist), DEGREES, wait=False);\n    LTop.spin_for(REVERSE, inchToDeg(dist), DEGREES, wait=False);\n    RHS.spin_for(REVERSE, inchToDeg(dist), DEGREES, wait=False);\n    RTop.spin_for(REVERSE, inchToDeg(dist), DEGREES, wait=w);\n\ndef turnRight(dist, speed=100, w=True):\n    global launchOn, intakeForward, intakeBack, shoot, r1Presses, liftStatus, moveCataButtonPress, autonMode, armUpDown, leftWingStatus, rightWingStatus, start, message1, fullDrive, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    LHS.set_velocity(speed,PERCENT);\n    LTop.set_velocity(speed,PERCENT);\n    RHS.set_velocity(speed,PERCENT);\n    RTop.set_velocity(speed,PERCENT);\n    LHS.spin_for(REVERSE, motorDegToWheelDeg(dist), DEGREES, wait=False);\n    LTop.spin_for(REVERSE, motorDegToWheelDeg(dist), DEGREES, wait=False);\n    RHS.spin_for(FORWARD, motorDegToWheelDeg(dist), DEGREES, wait=False);\n    RTop.spin_for(FORWARD, motorDegToWheelDeg(dist), DEGREES, wait=w);\n\ndef turnLeft(dist, speed=100, w=True):\n    global launchOn, intakeForward, intakeBack, shoot, r1Presses, liftStatus, moveCataButtonPress, autonMode, armUpDown, leftWingStatus, rightWingStatus, start, message1, fullDrive, vexcode_brain_precision, vexcode_console_precision, vexcode_controller_1_precision\n    LHS.set_velocity(speed,PERCENT);\n    LTop.set_velocity(speed,PERCENT);\n    RHS.set_velocity(speed,PERCENT);\n    RTop.set_velocity(speed,PERCENT);\n    LHS.spin_for(FORWARD, motorDegToWheelDeg(dist), DEGREES, wait=False);\n    LTop.spin_for(FORWARD, motorDegToWheelDeg(dist), DEGREES, wait=False);\n    RHS.spin_for(REVERSE, motorDegToWheelDeg(dist), DEGREES, wait=False);\n    RTop.spin_for(REVERSE, motorDegToWheelDeg(dist), DEGREES, wait=w);\n\n# create a function for handling the starting and stopping of all autonomous tasks\ndef vexcode_auton_function():\n    # Start the autonomous control tasks\n    auton_task_0 = Thread( onauton_autonomous_0 )\n    # wait for the driver control period to end\n    while( competition.is_autonomous() and competition.is_enabled() ):\n        # wait 10 milliseconds before checking again\n        wait( 10, MSEC )\n    # Stop the autonomous control tasks\n    auton_task_0.stop()\n\ndef vexcode_driver_function():\n    # Start the driver control tasks\n    driver_control_task_0 = Thread( ondriver_drivercontrol_0 )\n\n    # wait for the driver control period to end\n    while( competition.is_driver_control() and competition.is_enabled() ):\n        # wait 10 milliseconds before checking again\n        wait( 10, MSEC )\n    # Stop the driver control tasks\n    driver_control_task_0.stop()\n\ndef inchToDeg(val):\n    return val * inchToDegConstant\n\ndef motorDegToWheelDeg(val):\n    return round((val * turn180) / 180 )\n\ndef intakeConversion(val):\n    return val \n\ndef lowerRightWing():\n    rightWing.set(True)\n\ndef raiseRightWing():\n    rightWing.set(False)\n\ndef lowerLeftWing():\n    leftWing.set(True)\n\ndef raiseLeftWing():\n    leftWing.set(False)\n\n# register the competition functions\ncompetition = Competition( vexcode_driver_function, vexcode_auton_function )\n\n# system event handlers\n# add 15ms delay to make sure events are registered correctly.\nwait(15, MSEC)\n\nwhen_started1()\n","textLanguage":"python","rconfig":[{"port":[],"name":"Controller1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[9,10],"name":"RHS","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio6_1","motor_a_reversed":"false","motor_b_reversed":"false"},"triportSourcePort":22},{"port":[1,2],"name":"LHS","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio6_1","motor_a_reversed":"true","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[7],"name":"leftWing","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[1],"name":"lift","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22},{"port":[5,6],"name":"Intake","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio6_1","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[8],"name":"RTop","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[3],"name":"LTop","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio6_1"},"triportSourcePort":22},{"port":[8],"name":"rightWing","customName":true,"deviceType":"DigitalOut","deviceClass":"digital_out","setting":{"id":"partner"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20240219.10.00.00","appVersion":"3.1.0","minVersion":"3.1.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}